<?php
/**
 * ========================================================================================
 * 前台统一控制器:				
 * 			[有两个带front的控制器,这个控制器实际上页面也是显示在后台的,
 * 			虽然涉及的是前台的一些管理,而另一个则是页面也是在前台]
 * 		
 * 功能:
 * 		1,给所有导航条的项添加url地址.
 * =========================================================================================
 */
class FrontUnionController extends BaseController{
	//构造函数,验证登陆
	public function __construct(){
		$this->beforeFilter('auth');
	}

	/**
	 * ＊添加导航条url----[显示方法]＊
	 * 	
	 * 	说明:
	 * 		①导航条上的各项,都是从分类表里面查询然后输出.
	 * 		顶级分类在网站首页,循环输出(当然,添加顶级分类的时候有选项是否上导航栏).
	 * 		二级分类在二级分页的导航栏显示.	
	 * 		以此类推,三级分类在三级分页的导航栏显示.
	 * 		---------------------------------
	 * 	 	②这个显示页面,将给出一个包含所有设置为可显示在导航栏的类的列表.
	 * 	 	在模板上,将是一个form表单,批量处理所有url的设置.
	 *    	③这个方法同样是js来更改iframe的src,从而调用该方法,显示内容.
	 * 		
	 */
	public function getNavUrl(){
		//这里将分别查询,顶级分类,二级分类,三级分类的相关数据.更多的现在就不处理了,因为现在用不上.
		//注意,根据需求的改变,现在category表需要添加一个url字段:'navurl'.
		//前面的添加顶级分类或者是添加二级分类都是在没有这个字段的前提下做的.
		//那么现在改代码就太繁琐了.所有navurl字段都是到这里来后添加.
		//						--------------------------
		
	//1,顶级分类,注意,还需判断是否添加到导航
		try{
			$top=Category::whereRaw("pid=0 and nav=1")->get();
		}catch(\Exception $e){
			Log::error($e->getMessage());
			return '查询数据库失败!';
		}
		//如果是分类表还是刚创建,没有数据的情况,可能查询为空.如果连顶级分类都没有,那子类就更不用查了
		if(!count($top)){
			return '当前没有顶级分类!请先添加!';
		}

	//2,二级分类,三级分类一起做.同样的流程.条件不一样.
		//二级分类的path是由两个数字,两个逗号构成的,像:	'0,15,'
		//第二个数字是它父类的id,比较需要注意的是这个id可能是1位数,也可能是2位或者更多位数,所以不能以字符个数来截取这段.
		//---------------------------------------------------------------------------------------------
		//而应该用','拆分后拼接两个数字.再用来比较顶级分类的path,是否一样.
		//这里的话,用更简单的一个方法,直接用substr_count()去匹配有多少个',' 
		//---------------------------------------------------------
		//两个的就是二级分类,三个就是三级分类,设计表的时候就是这个思路的.
		//------------------------------------------------------
		//那么其实,上面的顶级分类都可以合并在一起做.但是已经写好了,就算了.
		
		/*
			流程:得出所有类->循环判断每个类的path有几个逗号->然后二级分类放进一个数组,三级的放到另一个数组.
			--------------------------------------------------------------------------------
		 */
		
		//A:查询所有类
		try{
			$all=Category::where('nav','<>',0)->get();
		}catch(\Exception $e){
			Log::error($e->getMessage());
			return '查询数据库失败!';
		}
		//如果是分类表还是刚创建,没有数据的情况,可能查询为空.
		if(!count($all)){
			return '当前没有符合条件的分类!';
		}
		
		//B:循环筛选出二级和三级分类
		$count=0;		//做个计数器,看总共有多少条数据
		foreach($all as $v){
			if(substr_count($v->path,',')==2){
				//二级分类
				$second[]=$v;
				$count++;
			}elseif(substr_count($v->path,',')==3){
				//三级分类
				$third[]=$v;
				$count++;
			}
			//至于其它的就过滤掉了
		}

		//C:页面table有一个说明列,需要知道rowspan有多少行,那么这里可以算下有少条数据带过去.
		//上面循环中可以用个计数器来计算二三级子类的数量,然后加上顶级分类的数量.
		$num=count($top)+$count;

	//3:然后输出到页面	[注意,二级分类和三级分类都有可能出现没有数据的情况,加个错误抑制符,到前台去判断.]
	//				------------------------------------------------------------------
		return View::make('admin/addFrontUrl')->with('top',$top)		//顶级分类
											->with('second',@$second)	//二级分类	
											->with('third',@$third)		//三级分类
											->with('num',$num);			//总数据条数
	}

	/**
	 * ＊添加导航条url-----[操作方法]＊
	 */
	public function postAddNavUrl(){
	//1,接收数据
		//关于这个项目的url,都是以http://cms/这样开头的,为了简化模板页面的输入,可以不写这个开头,直接写后面的.
		//而且直接用的category id作为表单input的name,所以两者直接就有映射关系.
		//这里注意,Input::all()会索引化数组,也就是说不会保留form表单的name.
		//-------------------------------
		//而我这里需要用到这个name,因为name上我放的是类id,直接用$_POST可以保持这个name作为键名
		//											--------------------------------				
		$data=$_POST;		//关于这个就没必要做数据验证了.

	//2:循环写入数据库
		foreach($data as $k=>$v){
			//注明:$k就是类id,$v就是navurl
			
			//A:首先要看输入的url是简写还是写完整了.如果是简写,得拼接完整,以便于以后输出
			if(strpos($v,'http')===false && $v){
				//有可能有的url没有填,就不需要替换
				//这是没有写前面这部分的情况
				$v='http://cms/'.$v;
			}

			//B:因为url有很多斜杠,写入数据库为了以后取出来保持完整,需要转义,不过看插入到数据库的情况,并没有转,也就是说不是必须,但是可以避免输入其他的特殊字符
			//------------------------------------------------------------------------------------------------------------------------
			$v=mysql_real_escape_string($v);

			//C:写入数据库
			try{
				Category::where('id',$k)->update(array('navurl'=>$v));
			}catch(\Exception $e){
				//返错
				Log::error($e->getMessage());
				$query=DB::getQueryLog();
				return Redirect::to('admin/front/nav-url')->with('msg','数据库操作失败!');
			}
			
		}

		//成功返回,同样给个信息
		return Redirect::to('admin/front/nav-url')->with('msg','设置成功!');
	}
}